////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef RETRO_SPRITE_HPP
#define RETRO_SPRITE_HPP

#include <optional>
#include <span>
#include <utility>
#include <vector>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class sprite
{
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create a sprite.
    /// \param width width in pixels
    /// \param height height in pixels
    /// \param pixels pixel data [optional]
    ////////////////////////////////////////////////////////////////////////////
    sprite(int width, int height, const std::optional<std::span<const int>>& pixels = std::nullopt);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor.
    /// \param copy instance to copy
    ////////////////////////////////////////////////////////////////////////////
    sprite(const sprite& copy) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param right instance to assign
    ////////////////////////////////////////////////////////////////////////////
    sprite& operator=(const sprite& right) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    sprite(sprite&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    sprite& operator=(sprite&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Fill sprite with a color.
    /// \param color fill color [0-255]
    ////////////////////////////////////////////////////////////////////////////
    void fill(int color);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Move sprite by a given offset.
    /// \param dx x offset
    /// \param dy y offset
    ////////////////////////////////////////////////////////////////////////////
    void move(int dx, int dy) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get sprite pixels
    /// \return pixels
    ////////////////////////////////////////////////////////////////////////////
    const std::vector<int>& pixels() const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set sprite position.
    /// \param x x coordinate
    /// \param y y coordinate
    ////////////////////////////////////////////////////////////////////////////
    void position(int x, int y) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get sprite position
    /// \return (x,y) coordinate
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] std::pair<int, int> position() const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get sprite size
    /// \return size of sprite (width, height)
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] std::pair<int, int> size() const noexcept;

    sprite() = delete;

  private:
    int m_width{};
    int m_height{};
    int m_x{};
    int m_y{};

    std::vector<int> m_texture;
};

}   // retro


#endif  // RETRO_SPRITE_HPP
