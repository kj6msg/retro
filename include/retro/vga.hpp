////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef VGA_HPP
#define VGA_HPP

#include <SDL2/SDL.h>

#include <vector>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class vga
{
  public:
    using color_t = Uint32;

    enum class mode
    {
        vga_03h,
        ega_0dh,
        ega_0eh,
        vga_12h,
        vga_13h
    };

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create a VGA device.
    /// \param video_mode standard video mode
    ////////////////////////////////////////////////////////////////////////////
    explicit vga(mode video_mode);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Destroy the associated window, renderer, and texture.
    ////////////////////////////////////////////////////////////////////////////
    ~vga();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Blit a full size indexed image to the screen.
    /// \param source indexed pixels
    ////////////////////////////////////////////////////////////////////////////
    void blit(const std::vector<int>& source);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Blit an indexed image to the screen.
    /// \param source indexed pixels
    /// \param rect position and dimension data
    ////////////////////////////////////////////////////////////////////////////
    void blit(const std::vector<int>& source, const SDL_Rect& rect);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get a color from the palette.
    /// \param index palette index (0-255)
    /// \return ARGB formatted color
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] color_t get_color(int index) const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Reset to the default palette.
    ////////////////////////////////////////////////////////////////////////////
    void reset_palette();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set an indexed color in the palette.
    /// \param index palette index (0-255)
    /// \param color ARGB formatted color
    ////////////////////////////////////////////////////////////////////////////
    void set_color(int index, color_t color);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set the entire color palette.
    /// \param colors vector of 256 ARGB formatted colors
    ////////////////////////////////////////////////////////////////////////////
    void set_palette(const std::vector<color_t>& colors);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set a pixel to an indexed color.
    /// \param x the x location of the pixel
    /// \param y the y location of the pixel
    /// \param color_index indexed color (0-255)
    ////////////////////////////////////////////////////////////////////////////
    void set_pixel(int x, int y, int color_index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Show the screen.
    ////////////////////////////////////////////////////////////////////////////
    void show();

    vga(const vga&) = delete;
    vga(vga&&) = delete;
    vga& operator=(const vga&) = delete;
    vga& operator=(vga&&) = delete;

  private:
    int m_width{};
    int m_height{};
    int m_num_colors{};

    SDL_Window*   m_window{nullptr};
    SDL_Renderer* m_renderer{nullptr};
    SDL_Texture*  m_texture{nullptr};

    std::vector<int> m_ram;
    std::vector<color_t> m_palette;
    std::vector<color_t> m_pixels;
};


////////////////////////////////////////////////////////////////////////////////
/// \brief Create an ARGB formatted color from red, green, blue values.
/// \param red red value (0-255)
/// \param green green value (0-255)
/// \param blue blue value (0-255)
/// \return ARGB formatted color
////////////////////////////////////////////////////////////////////////////////
[[nodiscard]] constexpr vga::color_t make_color(const int red, const int green, const int blue) noexcept
{
    constexpr int alpha{255};
    const auto color = (alpha << 24) | (red << 16) | (green << 8) | blue;
    return static_cast<vga::color_t>(color);
}

}   // retro


#endif  // VGA_HPP
