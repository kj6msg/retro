////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef RETRO_VGA_HPP
#define RETRO_VGA_HPP

#include <retro/font.hpp>

#include <cstddef>
#include <cstdint>
#include <span>
#include <vector>


////////////////////////////////////////////////////////////////////////////////
struct SDL_Point;
struct SDL_Renderer;
struct SDL_Texture;
struct SDL_Window;


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class color;
class sprite;


////////////////////////////////////////////////////////////////////////////////
class vga
{
  public:
    enum class mode
    {
        vga_03h,
        ega_0dh,
        ega_0eh,
        ega_10h,
        vga_12h,
        vga_13h
    };

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create a VGA device.
    /// \param video_mode standard video mode
    ////////////////////////////////////////////////////////////////////////////
    explicit vga(mode video_mode);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Destroy the associated window, renderer, and texture.
    ////////////////////////////////////////////////////////////////////////////
    ~vga();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Blit a full size indexed image to the screen.
    /// \param source indexed pixels
    ////////////////////////////////////////////////////////////////////////////
    void blit(std::span<const int> source);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Blit a sprite to the screen
    /// \param source source sprite
    ////////////////////////////////////////////////////////////////////////////
    void blit(const sprite& source);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get a color from the palette.
    /// \param index palette index (0-255)
    /// \return color
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] color get_color(int index) const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Write character.
    /// \param c character
    /// \param fg foreground color
    /// \param bg background color
    /// \param x x-coordinate
    /// \param y y-coordinate
    ////////////////////////////////////////////////////////////////////////////
    void putchar(unsigned char c, int fg, int bg, int x, int y);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Reset to the default palette.
    ////////////////////////////////////////////////////////////////////////////
    void reset_palette();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set an indexed color in the palette.
    /// \param index palette index (0-255)
    /// \param color ARGB formatted color
    ////////////////////////////////////////////////////////////////////////////
    void set_color(int index, const color& c);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set video mode.
    /// \param video_mode standard video mode
    ////////////////////////////////////////////////////////////////////////////
    void set_mode(mode video_mode);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set the entire color palette.
    /// \param colors vector of 256 ARGB formatted colors
    ////////////////////////////////////////////////////////////////////////////
    void set_palette(std::span<const color> colors);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set a pixel to an indexed color.
    /// \param x the x location of the pixel
    /// \param y the y location of the pixel
    /// \param color_index indexed color (0-255)
    ////////////////////////////////////////////////////////////////////////////
    void set_pixel(int x, int y, int color_index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Set a pixel to an indexed color.
    /// \param position position of the pixel
    /// \param color_index indexed color (0-255)
    ////////////////////////////////////////////////////////////////////////////
    void set_pixel(const SDL_Point& position, int color_index);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Show the screen.
    ////////////////////////////////////////////////////////////////////////////
    void show();

    vga() = delete;
    vga(const vga&) = delete;
    vga(vga&&) = delete;
    vga& operator=(const vga&) = delete;
    vga& operator=(vga&&) = delete;

  private:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Convert (x,y) coordinate to linear address.
    /// \param x x location
    /// \param y y location
    /// \return linear address of coordinate
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] constexpr std::size_t xy_to_index(int x, int y) noexcept;

    int m_width{};
    int m_height{};
    int m_num_colors{};

    SDL_Window*   m_window{nullptr};
    SDL_Renderer* m_renderer{nullptr};
    SDL_Texture*  m_texture{nullptr};

    std::vector<int> m_vram;
    std::vector<color> m_palette;
    font m_font;

    std::vector<std::uint32_t> m_pixels;
};

}   // retro


#endif  // RETRO_VGA_HPP
