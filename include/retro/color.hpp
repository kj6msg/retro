////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef RETRO_COLOR_HPP
#define RETRO_COLOR_HPP

#include <cstdint>
#include <stdexcept>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class color
{
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ////////////////////////////////////////////////////////////////////////////
    constexpr color() noexcept = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create color from RGB values.
    /// \param r red value (0-255)
    /// \param g green value (0-255)
    /// \param b blue value (0-255)
    ////////////////////////////////////////////////////////////////////////////
    constexpr color(int r, int g, int b);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create color from ARGB value.
    /// \param argb 32-bit ARGB value
    ////////////////////////////////////////////////////////////////////////////
    constexpr color(std::uint32_t argb) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor.
    /// \param other instance to copy
    ////////////////////////////////////////////////////////////////////////////
    color(const color& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param other instance to assign
    ////////////////////////////////////////////////////////////////////////////
    color& operator=(const color& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    color(color&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    color& operator=(color&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Convert color to 32-bit ARGB value.
    /// \return 32-bit ARGB value
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] constexpr std::uint32_t to_argb() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary + operator.
    /// \param b right operand
    /// \return result of a + b
    ////////////////////////////////////////////////////////////////////////////
    color operator+(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary + operator.
    /// \param b right operand
    /// \return result of a + b
    ////////////////////////////////////////////////////////////////////////////
    color operator+(int b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary - operator.
    /// \param b right operand
    /// \return result of a - b
    ////////////////////////////////////////////////////////////////////////////
    color operator-(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary - operator.
    /// \param b right operand
    /// \return result of a - b
    ////////////////////////////////////////////////////////////////////////////
    color operator-(int b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary * operator.
    /// \param b right operand
    /// \return result of a * b
    ////////////////////////////////////////////////////////////////////////////
    color operator*(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary * operator.
    /// \param b right operand
    /// \return result of a * b
    ////////////////////////////////////////////////////////////////////////////
    color operator*(int b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the += assignment operator.
    /// \param b right operand
    /// \return result of a += b
    ////////////////////////////////////////////////////////////////////////////
    color& operator+=(const color& b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the += assignment operator.
    /// \param b right operand
    /// \return result of a += b
    ////////////////////////////////////////////////////////////////////////////
    color& operator+=(int b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the -= assignment operator.
    /// \param b right operand
    /// \return result of a -= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator-=(const color& b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the -= assignment operator.
    /// \param b right operand
    /// \return result of a -= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator-=(int b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the *= assignment operator.
    /// \param b right operand
    /// \return result of a *= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator*=(const color& b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the *= assignment operator.
    /// \param b right operand
    /// \return result of a *= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator*=(int b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of prefix increment operator.
    /// \return result of ++a
    ////////////////////////////////////////////////////////////////////////////
    color& operator++() noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of postfix increment operator.
    /// \return result of a++
    ////////////////////////////////////////////////////////////////////////////
    color operator++(int) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of prefix decrement operator.
    /// \return result of --a
    ////////////////////////////////////////////////////////////////////////////
    color& operator--() noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of postfix decrement operator.
    /// \return result of a--
    ////////////////////////////////////////////////////////////////////////////
    color operator--(int) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    static const color black;
    static const color blue;
    static const color green;
    static const color cyan;
    static const color red;
    static const color magenta;
    static const color brown;
    static const color white;
    static const color dark_gray;
    static const color bright_blue;
    static const color bright_green;
    static const color bright_cyan;
    static const color bright_red;
    static const color bright_magenta;
    static const color bright_yellow;
    static const color bright_white;

  private:
    int m_r{};
    int m_g{};
    int m_b{};
};


////////////////////////////////////////////////////////////////////////////////
/// \brief Create an ARGB formatted color from red, green, blue values.
/// \param r red value (0-255)
/// \param g green value (0-255)
/// \param b blue value (0-255)
/// \return 32-bit ARGB value
////////////////////////////////////////////////////////////////////////////////
[[nodiscard]] constexpr std::uint32_t make_argb(const int r, const int g, const int b)
{
    if(r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255)
    {
        throw std::invalid_argument("make_argb has an invalid argument");
    }
    
    std::uint32_t argb{0xff000000u};

    argb |= static_cast<std::uint32_t>(b);
    argb |= static_cast<std::uint32_t>(g) << 8;
    argb |= static_cast<std::uint32_t>(r) << 16;

    return argb;
}


////////////////////////////////////////////////////////////////////////////////
constexpr color::color(const int r, const int g, const int b)
{
    if(r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255)
    {
        throw std::invalid_argument("color ctor has an invalid argument");
    }

    m_r = r;
    m_g = g;
    m_b = b;
}


////////////////////////////////////////////////////////////////////////////////
constexpr color::color(const std::uint32_t argb) noexcept
{
    m_r = static_cast<int>((argb & 0x00ff0000u) >> 16);
    m_g = static_cast<int>((argb & 0x0000ff00u) >> 8);
    m_b = static_cast<int>(argb & 0x000000ffu);
}


////////////////////////////////////////////////////////////////////////////////
constexpr std::uint32_t color::to_argb() const
{
    return make_argb(m_r, m_g, m_b);
}


////////////////////////////////////////////////////////////////////////////////
constexpr color color::black{0, 0, 0};
constexpr color color::blue{0, 0, 170};
constexpr color color::green{0, 170, 0};
constexpr color color::cyan{0, 170, 170};
constexpr color color::red{170, 0, 0};
constexpr color color::magenta{170, 0, 170};
constexpr color color::brown{170, 85, 0};
constexpr color color::white{170, 170, 170};
constexpr color color::dark_gray{85, 85, 85};
constexpr color color::bright_blue{85, 85, 255};
constexpr color color::bright_green{85, 255, 85};
constexpr color color::bright_cyan{85, 255, 255};
constexpr color color::bright_red{255, 85, 85};
constexpr color color::bright_magenta{255, 85, 255};
constexpr color color::bright_yellow{255, 255, 85};
constexpr color color::bright_white{255, 255, 255};

}   // retro


#endif  // RETRO_COLOR_HPP
