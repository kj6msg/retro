////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef COLOR_HPP
#define COLOR_HPP

#include <cstdint>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class color
{
  public:
    using argb_t = std::uint32_t;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ////////////////////////////////////////////////////////////////////////////
    color() noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create color from RGB values.
    /// \param r red value (0-255)
    /// \param g green value (0-255)
    /// \param b blue value (0-255)
    ////////////////////////////////////////////////////////////////////////////
    color(std::uint8_t r, std::uint8_t g, std::uint8_t b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create color from ARGB value.
    /// \param argb 32-bit ARGB value
    ////////////////////////////////////////////////////////////////////////////
    color(argb_t argb) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor.
    /// \param other instance to copy
    ////////////////////////////////////////////////////////////////////////////
    color(const color& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param other instance to assign
    ////////////////////////////////////////////////////////////////////////////
    color& operator=(const color& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    color(color&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    color& operator=(color&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Convert color to 32-bit ARGB value.
    /// \return 32-bit ARGB value
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] argb_t to_argb() const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary + operator.
    /// \param b right operand
    /// \return result of a + b
    ////////////////////////////////////////////////////////////////////////////
    color operator+(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary + operator.
    /// \param b right operand
    /// \return result of a + b
    ////////////////////////////////////////////////////////////////////////////
    color operator+(std::uint8_t b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary - operator.
    /// \param b right operand
    /// \return result of a - b
    ////////////////////////////////////////////////////////////////////////////
    color operator-(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary - operator.
    /// \param b right operand
    /// \return result of a - b
    ////////////////////////////////////////////////////////////////////////////
    color operator-(std::uint8_t b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary * operator.
    /// \param b right operand
    /// \return result of a * b
    ////////////////////////////////////////////////////////////////////////////
    color operator*(const color& b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the binary * operator.
    /// \param b right operand
    /// \return result of a * b
    ////////////////////////////////////////////////////////////////////////////
    color operator*(std::uint8_t b) const noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the += assignment operator.
    /// \param b right operand
    /// \return result of a += b
    ////////////////////////////////////////////////////////////////////////////
    color& operator+=(const color& b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the += assignment operator.
    /// \param b right operand
    /// \return result of a += b
    ////////////////////////////////////////////////////////////////////////////
    color& operator+=(std::uint8_t b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the -= assignment operator.
    /// \param b right operand
    /// \return result of a -= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator-=(const color& b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of the -= assignment operator.
    /// \param b right operand
    /// \return result of a -= b
    ////////////////////////////////////////////////////////////////////////////
    color& operator-=(std::uint8_t b) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of prefix increment operator.
    /// \return result of ++a
    ////////////////////////////////////////////////////////////////////////////
    color& operator++() noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of postfix increment operator.
    /// \return result of a++
    ////////////////////////////////////////////////////////////////////////////
    color operator++(int) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of prefix decrement operator.
    /// \return result of --a
    ////////////////////////////////////////////////////////////////////////////
    color& operator--() noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of postfix decrement operator.
    /// \return result of a--
    ////////////////////////////////////////////////////////////////////////////
    color operator--(int) noexcept;

  private:
    std::uint8_t m_r{0u};
    std::uint8_t m_g{0u};
    std::uint8_t m_b{0u};
};


////////////////////////////////////////////////////////////////////////////////
/// \brief Create an ARGB formatted color from red, green, blue values.
/// \param r red value (0-255)
/// \param g green value (0-255)
/// \param b blue value (0-255)
/// \return 32-bit ARGB value
////////////////////////////////////////////////////////////////////////////////
[[nodiscard]] constexpr color::argb_t make_argb(const std::uint8_t r, const std::uint8_t g, const std::uint8_t b) noexcept
{
    constexpr std::uint8_t a{255u};

    auto argb = static_cast<color::argb_t>(b);
    argb |= static_cast<color::argb_t>(g) << 8u;
    argb |= static_cast<color::argb_t>(r) << 16u;
    argb |= static_cast<color::argb_t>(a) << 24u;

    return argb;
}

}   // retro


#endif  // COLOR_HPP
