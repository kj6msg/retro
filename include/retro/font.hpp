////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#ifndef RETRO_FONT_HPP
#define RETRO_FONT_HPP

#include <retro/types.hpp>

#include <cstddef>
#include <cstdint>
#include <span>
#include <utility>
#include <vector>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
class font
{
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create empty font.
    ////////////////////////////////////////////////////////////////////////////
    font() = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Create font from glyph data.
    /// \param glyphs font glyphs
    /// \param width glyph width (pixels)
    /// \param height glyph height (pixels)
    ////////////////////////////////////////////////////////////////////////////
    font(std::span<const std::byte> glyphs, int width, int height);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor.
    /// \param copy instance to copy
    ////////////////////////////////////////////////////////////////////////////
    font(const font& copy) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param right instance to copy
    ////////////////////////////////////////////////////////////////////////////
    font& operator=(const font& right) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor.
    /// \param other instance to move
    ////////////////////////////////////////////////////////////////////////////
    font(font&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Overload of assignment operator.
    /// \param right instance to move
    ////////////////////////////////////////////////////////////////////////////
    font& operator=(font&& other) = default;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get glyph from font.
    /// \param c character code
    /// \param fg foreground color
    /// \param bg background color
    /// \return pixelized glyph
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] vram_t glyph(unsigned char c, pixel_t fg, pixel_t bg) const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get size of font.
    /// \return size of font (width, height)
    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]] std::pair<int, int> size() const noexcept;

  private:
    int m_width{};
    int m_height{};

    std::vector<std::byte> m_glyphs;
};

}   // retro


#endif  // RETRO_FONT_HPP
