////////////////////////////////////////////////////////////////////////////////
// Retro - Retro Computing Library
// Copyright (c) 2023 Ryan Clarke
////////////////////////////////////////////////////////////////////////////////

#include "retro/sdl2.hpp"

#include <SDL2/SDL.h>

#include <stdexcept>
#include <type_traits>


////////////////////////////////////////////////////////////////////////////////
namespace retro
{

////////////////////////////////////////////////////////////////////////////////
using subsystem_t = std::underlying_type_t<sdl2::subsystem>;


////////////////////////////////////////////////////////////////////////////////
sdl2::sdl2(const subsystem flags)
{
    if(SDL_Init(static_cast<subsystem_t>(flags)) != 0)
    {
        throw std::runtime_error(SDL_GetError());
    }
}


////////////////////////////////////////////////////////////////////////////////
sdl2::~sdl2()
{
    SDL_Quit();
}


////////////////////////////////////////////////////////////////////////////////
void sdl2::init_subsystem(const subsystem flags) const
{
    if(SDL_InitSubSystem(static_cast<subsystem_t>(flags)) != 0)
    {
        throw std::runtime_error(SDL_GetError());
    }
}


////////////////////////////////////////////////////////////////////////////////
sdl2::subsystem sdl2::was_init(const subsystem flags) const noexcept
{
    return static_cast<subsystem>(SDL_WasInit(static_cast<subsystem_t>(flags)));
}


////////////////////////////////////////////////////////////////////////////////
void sdl2::quit_subsystem(const subsystem flags) const noexcept
{
    SDL_QuitSubSystem(static_cast<subsystem_t>(flags));
}


////////////////////////////////////////////////////////////////////////////////
constexpr sdl2::subsystem operator|(const sdl2::subsystem lhs, const sdl2::subsystem rhs)
{
    return sdl2::subsystem{static_cast<subsystem_t>(lhs) | static_cast<subsystem_t>(rhs)};
}


////////////////////////////////////////////////////////////////////////////
constexpr sdl2::subsystem operator&(const sdl2::subsystem lhs, const sdl2::subsystem rhs)
{
    return sdl2::subsystem{static_cast<subsystem_t>(lhs) & static_cast<subsystem_t>(rhs)};
}

}   // retro
